# -*- coding: utf-8 -*-
"""6_Python_for_Web_Science__Homework_LIU_group4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mOSl0N1t9V-gIYl-4fimhjj3mEsMoQok

# Homework

This notebook should run through to  the end without errors (try Runtime -> Run all), and produce the correct answers as a result.  

You will find yourself copying code from the Lesson notebook.  

*There is a chance I will issue corrections for this assignment. If so, I will try to do so before the end of the week.*
"""

from collections import defaultdict

# a dict with default of 0 should take 0, 
#   but instead it has to take a function that returns 0. 
#   Sorry, just one of those things.
def returnzero():
  return(0)

# a one-entry dictionary, initialize dict with default value
countByName = defaultdict(returnzero)
countByName['Susie'] = 5

print( countByName['Susie'] )     # <-- 5
print( countByName['Siouxsie'] )  # <-- 0, instead of Error
#when you put in a key that's not there, you get zero

"""Social Media Imported from Lesson"""

# imports
import json
import pprint
from google.colab import files
import urllib.request
import time
from IPython.display import clear_output, display, Audio, Image

# load your authentication, with information for both Spotify and Instagram
uploaded = files.upload()

# You don't have to understand this line.  
auth_pers = json.loads( list( uploaded.values() ).pop().decode('utf-8') )
insta_user_name = auth_pers['instagram']['username']
insta_password = auth_pers['instagram']['password'] #authentification for ig
spoti_clientID = auth_pers['spotify']['clientID'] #authentification for spotify
spoti_clientSecret = auth_pers['spotify']['clientSecret']

"""Set up for IG"""

### image relevant
import numpy as np
import cv2
import matplotlib.pyplot as plt

### Helper fuunctions
# from https://www.pyimagesearch.com/2015/03/02/convert-url-to-image-with-python-and-opencv/
def url_to_image(url):
	# download the image, convert it to a NumPy array, and then read
	# it into OpenCV format
	resp = urllib.request.urlopen(url)
	image = np.asarray(bytearray(resp.read()), dtype="uint8")
	image = cv2.imdecode(image, cv2.IMREAD_COLOR)
 
	# return the image
	return image

#https://stackoverflow.com/questions/16758316/where-do-i-find-the-instagram-media-id-of-a-image
# Instagram has a format for switching between string and numeric IDs for items.
def media_id_to_code(media_id):
  alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'
  short_code = ''
  while media_id > 0:
    remainder = media_id % 64
    media_id = (media_id-remainder)//64
    short_code = alphabet[remainder] + short_code
  return short_code

def code_to_media_id(short_code):
  alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'
  media_id = 0;
  for letter in short_code:
    media_id = (media_id*64) + alphabet.index(letter)
  return media_id

! pip install git+https://git@github.com/ping/instagram_private_api.git@1.6.0

from instagram_private_api import Client, ClientCompatPatch

# this is the api object for accessing the site
instagram = Client(insta_user_name, insta_password)

"""Set up Spotify"""

!pip install spotipy

import spotipy
import spotipy.oauth2 as oauth2

credentials = oauth2.SpotifyClientCredentials(
        client_id=spoti_clientID,
        client_secret=spoti_clientSecret)

token = credentials.get_access_token()
# this is the api object for accessing the site
spotify = spotipy.Spotify(auth=token)

"""### 0)

Add your name to the title of this file, as well as your group number if you have a group.

### 1)

Sort the songs on the Digable Planet's 1993 *Reachin'* by "danceability"
"""

from collections import Counter
aid = 'spotify:album:5snUbps5KleLIP0cVI72lP'
results = spotify.album_tracks( aid  )

# build dictionary assigning danceability value to each song in the album.
reachin_traits = defaultdict(int)
for t in  results['items']:
  #pprint.pprint(t)
  #print(  t['name'], t['id'], spotify.audio_features( t['id'] ) )
  reachin_traits[t['name']]  =  spotify.audio_features( t['id'] )[0]['danceability']

Counter(reachin_traits).most_common() ### The values aren't counts, but this still works to sort them.

"""### 2)
Get the title of each song in the Magnetic Field's *"69 Love Songs"*, and calculate the proportion that have 'love' (or 'Love') in the title. You might have trouble getting more than `count = 50` of the 69 songs.  You can stop there or figure out the `offset` argument to get all of the songs.
"""

aid2 = 'spotify:album:2js3lkzAjWpD656NK7ZaJX' #replace with url from other albums to get dif songs
results2 = spotify.album_tracks( aid2  )
name_list = []
count = 0
for i in  results2['items']:
  name_list.append(i['name'].lower())
#print(name_list)
for track_name in name_list:
  if "love" in track_name:
    count = count + 1
print("%d / 69" %count)
    #pprint.pprint(i)        # uncomment to see what info Spotify stores about tracks

"""### 3) 
Use [Spotify search](https://open.spotify.com/search) to retrieve the IDs of ten or more covers of Bob Dylan's "*The Lonesome Death of Hattie Carroll*" (It's OK to do the retrieval "manually" through your browser. Don't get more than one cover per artist).  Then use the API to retrieve playable clips for every version you  found.
"""

track_id = ["2lnrxXWkV6JHJjSIUtLLeL", "1U9bGLWamJPhedCiCiqnTu", "0SmeYSdRPN72O768jlupCX", "2u74NjPxxERxLKH2ez0xRM",
           "5VGXHwJ7Gd318UOegEQBrz", "2QoqfT2TJs0GgXjpED9Jx", "6nJB8TeWUZopoNy0n8vQ9U", "6lmuHyE4710MltCyeG2Jnt",
           "1HXWHf8yCyMreHovTvg1Xm", "52lOIqXR1CLDblkpCD241C"]

#   Note that the ID is at the end of the URL, just like it was on Instagram

b_track = spotify.track('spotify:track:2lnrxXWkV6JHJjSIUtLLeL') # load media to python through api object
url_mp3_dylan = b_track['preview_url']                       # extract URL
print(url_mp3_dylan)
Audio(url=url_mp3_dylan+'.mp3') #autoplay=True                 # play music clip

#   Note that the ID is at the end of the URL, just like it was on Instagram

c_track = spotify.track('spotify:track:1U9bGLWamJPhedCiCiqnTu') # load media to python through api object
url_mp3_dylan = c_track['preview_url']                       # extract URL
print(url_mp3_dylan)
Audio(url=url_mp3_dylan+'.mp3') #autoplay=True                 # play music clip

#   Note that the ID is at the end of the URL, just like it was on Instagram

b_track = spotify.track('spotify:track:0SmeYSdRPN72O768jlupCX') # load media to python through api object
url_mp3_dylan = b_track['preview_url']                       # extract URL
print(url_mp3_dylan)
Audio(url=url_mp3_dylan+'.mp3') #autoplay=True                 # play music clip

#   Note that the ID is at the end of the URL, just like it was on Instagram

b_track = spotify.track('spotify:track:2u74NjPxxERxLKH2ez0xRM') # load media to python through api object
url_mp3_dylan = b_track['preview_url']                       # extract URL
print(url_mp3_dylan)
Audio(url=url_mp3_dylan+'.mp3') #autoplay=True                 # play music clip

#   Note that the ID is at the end of the URL, just like it was on Instagram

b_track = spotify.track('spotify:track:5VGXHwJ7Gd318UOegEQBrz') # load media to python through api object
url_mp3_dylan = b_track['preview_url']                       # extract URL
print(url_mp3_dylan)
Audio(url=url_mp3_dylan+'.mp3') #autoplay=True                 # play music clip

#   Note that the ID is at the end of the URL, just like it was on Instagram

b_track = spotify.track('spotify:track:15ppExii5Wd7YQUiyU1b7q') # load media to python through api object
url_mp3_dylan = b_track['preview_url']                       # extract URL
print(url_mp3_dylan)
Audio(url=url_mp3_dylan+'.mp3') #autoplay=True                 # play music clip

#   Note that the ID is at the end of the URL, just like it was on Instagram

b_track = spotify.track('spotify:track:6nJB8TeWUZopoNy0n8vQ9U') # load media to python through api object
url_mp3_dylan = b_track['preview_url']                       # extract URL
print(url_mp3_dylan)
Audio(url=url_mp3_dylan+'.mp3') #autoplay=True                 # play music clip

#   Note that the ID is at the end of the URL, just like it was on Instagram

b_track = spotify.track('spotify:track:6lmuHyE4710MltCyeG2Jnt') # load media to python through api object
url_mp3_dylan = b_track['preview_url']                       # extract URL
print(url_mp3_dylan)
Audio(url=url_mp3_dylan+'.mp3') #autoplay=True                 # play music clip

#   Note that the ID is at the end of the URL, just like it was on Instagram

b_track = spotify.track('spotify:track:1HXWHf8yCyMreHovTvg1Xm') # load media to python through api object
url_mp3_dylan = b_track['preview_url']                       # extract URL
print(url_mp3_dylan)
Audio(url=url_mp3_dylan+'.mp3') #autoplay=True                 # play music clip

#   Note that the ID is at the end of the URL, just like it was on Instagram

b_track = spotify.track('spotify:track:52lOIqXR1CLDblkpCD241C') # load media to python through api object
url_mp3_dylan = b_track['preview_url']                       # extract URL
print(url_mp3_dylan)
Audio(url=url_mp3_dylan+'.mp3') #autoplay=True                 # play music clip

"""### 4)
Although we only used cat and person classifiers, you will see definitions for others in the  code, including full and upper body classifiers.  

1) Show how many bodies the "full body" classifier detects in the cover of Weezer's 1994 eponymous debut, also known as the "blue album". Start from Spotify's URL for the album's cover art.

2)  Repeat  using  the torso / "upper body" classifier. Any difference?

**Setup**
"""

# import the necessary packages
import numpy as np
import urllib.request
import cv2
from PIL import Image as ImagePIL
from io import BytesIO

### PRETRAINED CLASSIFIERS
# Each classifer is an xml file, which, like JSON, is a "nested dictionary" style data structure.

### haarPath depends on the structure of colab instances, which could change
###  Worst case, #!git clone git://github.com/opencv/opencv.git for known path
haarPath = '/usr/local/lib/python3.6/dist-packages/cv2/data/'
faceFrontDetectorPath = haarPath + 'haarcascade_frontalface_default.xml'   # faces looking forward
faceProfileDetectorPath = haarPath + 'haarcascade_profileface.xml'         # faces in profile
smileDetectorPath = haarPath + 'haarcascade_smile.xml'                     # smiles
eyeDetectorPath = haarPath + 'haarcascade_eye_tree_eyeglasses.xml'         # eyes
bodyDetectorPath = haarPath + 'haarcascade_fullbody.xml'                   # full bodies
torsoDetectorPath = haarPath + 'haarcascade_upperbody.xml'                 # upper bodies
catFaceDetectorPath = haarPath + 'haarcascade_frontalcatface_extended.xml' # cat faces

### HELPER FUNCTIONS
 
# https://www.pyimagesearch.com/2015/03/02/convert-url-to-image-with-python-and-opencv/
def url_to_image(url):
	# download the image, convert it to a NumPy array, and then read
	# it into OpenCV format
	resp = urllib.request.urlopen(url)
	image = np.asarray(bytearray(resp.read()), dtype="uint8")
	image = cv2.imdecode(image, cv2.IMREAD_COLOR)
	# return the image
	return image

# use classifer to both detect object and locate it in the image (with a rectangle of coordinates)
def locateObject(img, classifierPath='haarcascade_frontalface_default.xml'):
  object_cascade = cv2.CascadeClassifier(classifierPath)
  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  found_objects = object_cascade.detectMultiScale(gray, 1.3, 5)
  return( found_objects)

# same as above but Boolean return value
def hasObject(img, classifierPath='haarcascade_frontalface_default.xml'):
  coords = locateObject(img, classifierPath=classifierPath)
  return( bool(len(coords)))

# boolean cat detector
def hasCatFace(img):
  return( hasObject(img, classifierPath=catFaceDetectorPath) )

# boolean face detector
def hasPersonFace(img):
  return( hasObject(img, classifierPath=faceFrontDetectorPath) )

# show image
def  showImage(  img  ):
  plt.grid(None)   
  plt.xticks([])
  plt.yticks([])
  imgplot = plt.imshow(img)
  plt.show()


# Retrieve kitten pictures of any size from placekitten.com
#   It's a Week 1 throwback!   
def getKittenURL(h, w):
  URL="http://placekitten.com/" + str(h) + "/" + str(w) 
  return( URL )
def getKitten(h, w):
  headers = {'User-agent':'Mozilla/5.0'}
  URL=getKittenURL(h, w)
  response = requests.get(URL, headers=headers)
  img = ImagePIL.open(BytesIO(response.content))
  return( img )

"""Code"""

weezerImg = url_to_image('https://i.scdn.co/image/0e9c778a26796b85b75514488f4a2cf1e6c4e2ad') #  create classifiable image object from URL
showImage( weezerImg ) # print classifiable image to screen

weezerbodies = locateObject(weezerImg, bodyDetectorPath) # perform body detection

for (x,y,w,h) in weezerbodies: # draw rectangle on body
  cv2.rectangle(weezerImg,(x,y),(x+w,y+h),(0,255,0),2)
showImage( weezerImg )

weezertorso = locateObject(weezerImg, torsoDetectorPath) # perform upper body
for (x,y,w,h) in weezertorso: # draw rectangle on body
  cv2.rectangle(weezerImg,(x,y),(x+w,y+h),(0,255,0),2)
showImage( weezerImg )

def hasPersonTorso(img):
  return( hasObject(img, classifierPath=torsoDetectorPath) )

hasPersonTorso(weezerImg)

### testing on another image because body identifier was not working for weezer
prImg = url_to_image('https://mondrian.mashable.com/uploads%252Fcard%252Fimage%252F267069%252FCwHAKqKUEAA66yg.jpg%252Ffit-in__1200x9600.jpg?signature=nPu80f6kceWylMMngunaCfUQ0Aw=&source=https%3A%2F%2Fblueprint-api-production.s3.amazonaws.com') #  create classifiable image object from URL
#showImage( weezerImg ) # print classifiable image to screen

prbodies = locateObject(prImg, bodyDetectorPath) # perform body detection

for (x,y,w,h) in prbodies: # draw rectangle on body
  cv2.rectangle(prImg,(x,y),(x+w,y+h),(0,255,0),2)
showImage( prImg )

#https://www.historycolorado.org/sites/default/files/media/images/2017/3-lesliecookiesprepareforwar.jpg

#https://i.scdn.co/image/0e9c778a26796b85b75514488f4a2cf1e6c4e2ad

#get weezer album info
#weezer = 'spotify:artist:3jOstUTkEu2JkjvRdBA5Gu'

#results = spotify.artist_albums(weezer, album_type='album', limit=50, offset=0)

# Why ['items'] and not .items()? Because this way worked.
#  I did the detective work on the data structure, and this is how Spotify manages it.
#for album in results['items']: 
  #pprint.pprint(album)        # uncomment to see what info Spotify stores about albums
  #print(album['name'])

"""### 5) 
Does our face classifier have pareidolia?  See if it sees faces in @faces_in_things's Instagram feed.
"""

results = instagram.username_feed('faces_in_things')
### extract items (posts) into a list
items = []
for item in results['items']:
  items.append( item )

### show images
faces_found = 0
for item in items:
  clear_output()
  if 'image_versions2' in item:
    URL=item['image_versions2']['candidates'][1]['url']
    
    faceImg = url_to_image(URL)
    faceFaces = locateObject(faceImg, faceFrontDetectorPath)
    for (x,y,w,h) in faceFaces:
      cv2.rectangle(faceImg,(x,y),(x+w,y+h),(0,255,0),2)
    showImage( faceImg )
    print( hasPersonFace(faceImg) )

    if  hasPersonFace( faceImg ):
      faces_found += 1

    time.sleep(1.2)
print("Found", str(faces_found), "of", str(len(items)), "faces")

"""### 6) CHALLENGE
Do something fun, creative, and  ambitious with image classification. Brainstorm with others for a powerful idea. I'll recognize the best in class.
"""

#Samantha Ballard