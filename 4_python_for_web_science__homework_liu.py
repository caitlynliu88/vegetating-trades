# -*- coding: utf-8 -*-
"""4_Python_for_Web_Science__Homework_LIU.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19O6Wu5hNlDXWA97EwPsRifnjCHzLYVDt

# Homework

This notebook should run through to  the end without errors (try Runtime -> Run all), and produce the correct answers as a result.  

You will find yourself copying code from the Lesson notebook, that is OK.
"""



"""### 0)

Add your name to the title of this file

### 1)

Help! The `2` key on my keyboard is broken. I need you to write a function that returns the number `2`, one that I can invoke in lieu  of having the right key.   Call the function `two()` and show me that it works by assigning the output of `2 + two()` to a variable `four` and `print`ing it.
"""

def two():
  x = 1 + 1
  return x

four = (2 + two())
print(four)

"""### 2)
Write a function called `dePastTenser()` that takes a string and, if it ends in "ed", returns a version  of  the string with  its suffix "ed" removed. Show some examples of it  working.
"""

def dePastTenser(astring):
  #you have to account for "ed" in the middle of the word (i.e. pedaled)
  #calling an if statement to specify the location of "ed"
  if astring[-2] == "e" and astring[-1] == "d":
    #returning only what is before the last two indices of the string
    return astring[:-2]

dePastTenser("walked")
#dePastTenser("ededucated")
#dePastTenser("jumped")
#dePastTenser("pedaled")

#returns an incorrect answer
#def dePastTenser(oldstr):
  #newstr = oldstr.replace("ed","")
  #return newstr

#dePastTenser("excited") #works
#dePastTenser("educated") #returns "ucat"

"""### 3) 
Write a function `reverse()` that takes  a string  and returns its reverse. Show some examples of it  working.
"""

def reverse(astring):
  return(astring[::-1])

#reverse('dog')
reverse('A cow jumped over the moon.')

"""### 4)

A  palindrome is  a word that reads  the same forwards as backwards. Write a function called `palindrome()` that takes a string and returns a True/False ("Boolean") value: `True` if it is a palindrome and `False` otherwise. Use your `reverse()` function.  Show some examples of `palindrome()`  working.
"""

def palindrome(astring):
  reverse2 = reverse(astring)
  if reverse2 == astring:
    return True
  else:
    return False
    
palindrome('civic')
#palindrome('dog')
#palindrome('madam')

#ANOTHER SOLUTION
#def palindrome(astring):
  #return reverse(astring) == astring

"""### 5)
Old timey English isn't just hard to read, it can be hard to relate to.  Write a `modernize()` function that takes a list of words and performs the following modernizations:
*   translates *"ne'er"* into *"never"*
*   translates *"doth"* into *"do"* 
*   translates *"dost"* into *"do"*
*   translates *"mayst"* into *"may"* 
*   translates *"hath"* into *"has"*
*   translates *"hast"* into *"has"*
*   translates *"thou"* into *"you"*
*   translates *"thee"* into *"you"*
*   translates *"thy"* into *"your"*
*   translates *"nay"* into *"no"*
*   translates *"e'er"* into *"ever"*
*   translates *"ere"* into *"before"*
*   translates *"Ay"* into *"Yo!"*
*   finds words that  end in *"'d"* and makes them end in *"ed"*

Don't worry about caps: It is OK if a "Ne'er" gets missed, as long as  all "ne'er"s get translated.


Show some examples of it  working.
"""

#could also just do one really long if statement that accounts for allll of the translations

def modernize(words):
  old_english = {"ne'er": "never", "doth": "do", "dost": "do", "mayst": "may",
              "hath": "has", "hast": "has", "thou": "you", "thee": "you",
              "thy": "you", "nay": "no", "e'er": "ever", "ere": "before",
              "ay": "yo!"}
  for i in range(len(words)): #will run how as many times as how many things are in the list
    if words[i] in old_english.keys(): 
        words[i] = old_english[words[i]]
    if words[i][-1] == 'd' and words[i][-2] == "'":
      words[i]= words[i][0:-2] + 'ed'
  return words
      
words = ["e'er", "hath", "for", "ere", "Demetrius", "look'd", "on", "looked", "thee", "hath"]
modernize(words)

"""### 6)

1) Write a function `ISUPPER()` that takes a string and returns `True` if it is in  ALL CAPS.  For example 
```
ISUPPER("ROMEO")
ISUPPER("I")
ISUPPER("ME AND YOU")
```
would all return `True` while 
```
ISUPPER("Romeo")
ISUPPER("You and I")
```
would both return `False`.

Show some examples of `ISUPPER()` working.
"""

def ISUPPER(astring):
  if astring.isupper():
    return True
  else:
    return False
#ISUPPER('YES')
ISUPPER('Romeo')

"""2) Write a function called `allCapsCount()` that  takes a list of words and returns a dictionary with a key for each all caps word, and, as the value, the number of times  that word appeared in the list. You can use your `ISUPPER()` function in the answer. Show some examples of this function  working."""

text = ["TRY", "to", "DO", "MY", "homework", "DO", "TRY", "TODAY"]
#list = ["REALLY", "REALLY", "REALLY", "love", "my", "DOG", "DOG"]
def allCapsCount(text):
  caps = {}
  for word in text: #for every word in list
    if ISUPPER(word) == True: #if it is uppercase
      counts = 0 #initialize counter variable
      counts += text.count(word) #increment the number of times it's in list
      #print(counts) #test
      if word not in caps:
        caps[word] = counts #add new key,value to dictionary
  return caps

allCapsCount(text)

"""3) If you  plug one of Shakespeare's plays from `works_texts` into `allCapsCount()`, you'll see that, among other things, it gives a rough count of each character's number of spoken lines (with a bit of noise, like any other all caps words that appeared;  don't worry about it).  

We're going to use this to write an automatic agent that will help us through our acting career by reviewing scripts and job offers and telling us to turn down acting parts that don't  speak enough lines.   

Let's name the output of `allCapsCount()`, we'll  call  it `capsCount`.  Write a function called `yourStageAgent()` that takes two arguments: the text of a play (as  a list of words, like usual) and  the name  of a character in that play (in all caps).  Using the the output of `allCapsCount()`, it  will look up the part. If `capsCount` detects 5  or more occurrences of that character, `yourStageAgent()` will return the string `"Take the part!"`, and if it is less than 5, it will return `"You'll get more time on stage mopping it!"`.
 
Use `allCapsCount()` to see if you should accept the parts of Mercutio  and  Citizen in  *Romeo and Juliet*
"""

# A list of words Shakespeare invented.  Give it a run through, you'll be surprised.
# from https://www.litcharts.com/blog/shakespeare/words-shakespeare-invented/
coinages = ["academe", "accessible", "accommodation", "addiction", "admirable", "aerial", "airless", "amazement", "anchovy", "arch-villain", "auspicious", "bacheolorship", 
            "barefaced", "baseless", "batty", "beachy", "bedroom", "belongings", "birthplace", "black-faced", "bloodstained", "bloodsucking", "blusterer", "bodikins", "braggartism", 
            "brisky", "broomstaff", "budger", "bump", "buzzer", "candle holder", "catlike", "characterless", "cheap", "chimney-top", "chopped", "churchlike", "circumstantial", 
            "clangor", "cold-blooded", "coldhearted", "compact", "consanguineous", "control", "coppernose", "countless", "courtship", "critical", "cruelhearted", "Dalmatian", 
            "dauntless", "dawn", "day’s work", "deaths-head", "defeat", "depositary", "dewdrop", "dexterously", "disgraceful", "distasteful", "distrustful", "dog-weary", 
            "doit", "domineering", "downstairs", "dwindle", "East Indies", "embrace", "employer", "employment", "enfranchisement", "engagement", 
            "enrapt", "epileptic", "equivocal", "eventful", "excitement", "expedience", "expertness", "exposure", "eyedrop", "eyewink", "fair-faced", "fairyland", "fanged", 
            "fap", "far-off", "farmhouse", "fashionable", "fashionmonger", "fat-witted", "fathomless", "featureless", "fiendlike", "fitful", "fixture", "fleshment", "flirt-gill", 
            "flowery", "fly-bitten", "footfall", "foppish", "foregone", "fortune-teller", "foul mouthed", "Franciscan", "freezing", "fretful", "full-grown", "fullhearted", 
            "futurity", "gallantry", "garden house", "generous", "gentlefolk", "glow", "go-between", "grass plot", "gravel-blind", "gray-eyed", "green-eyed", "grief-shot", 
            "grime", "gust", "half-blooded", "heartsore", "hedge-pig", "hell-born", "hint", "hobnail", "homely", "honey-tongued", "hornbook", "hostile", "hot-blooded", "howl", 
            "hunchbacked", "hurly", "idle-headed", "ill-tempered", "ill-used", "impartial", "imploratory", "import", "in question", "inauspicious", "indirection", 
            "indistinguishable", "inducement", "informal", "inventorially", "investment", "invitation", "invulnerable", "jaded", "juiced", "keech", "kickie-wickie", 
            "kitchen-wench", "lackluster", "ladybird", "lament", "land-rat", "laughable", "leaky", "leapfrog", "lewdster", "loggerhead", "lonely", "long-legged", "love letter", 
            "lustihood", "lustrous", "madcap", "madwoman", "majestic", "malignancy", "manager", "marketable", "marriage bed", "militarist", "mimic", "misgiving", "misquote", 
            "mockable", "money’s worth", "monumental", "moonbeam", "mortifying", "motionless", "mountaineer", "multitudinous", "neglect", "never-ending", "newsmonger", 
            "nimble-footed", "noiseless", "nook-shotten", "obscene", "ode", "offenseful", "offenseless", "Olympian", "on purpose", "oppugnancy", "outbreak", "overblown", 
            "overcredulous", "overgrowth", "overview", "pageantry", "pale-faced", "passado", "paternal", "pebbled", "pedant", "pedantical", "pendulous", "pignut", "pious", 
            "please-man", "plumpy", "posture", "prayerbook", "priceless", "profitless", "Promethean", "protester", "published", "puking (disputed)", "puppy-dog", "pushpin", 
            "quarrelsome", "radiance", "rascally", "rawboned", "reclusive", "refractory", "reinforcement", "reliance", "remorseless", "reprieve", "resolve", "restoration", 
            "restraint", "retirement", "revokement", "revolting", "ring carrier", "roadway", "roguery", "rose-cheeked", "rose-lipped", "rumination", "ruttish", "sanctimonious", 
            "satisfying", "savage", "savagery", "schoolboy", "scrimer", "scrubbed", "scuffle", "seamy", "self-abuse", "shipwrecked", "shooting star", "shudder", "silk stocking", 
            "silliness", "skim milk", "skimble-skamble", "slugabed", "soft-hearted", "spectacled", "spilth", "spleenful", "sportive", "stealthy", "stillborn", "successful", 
            "suffocating", "tanling", "tardiness", "time-honored", "title page", "arouse", "barber", "bedabble", "belly", "besmirch", "bet", "bethump", "blanket", "cake", 
            "canopy", "castigate", "cater", "champion", "comply", "compromise", "cow", "cudgel", "dapple", "denote", "dishearten", "dislocate", "educate", "elbow", "enmesh", 
            "enthrone", "fishify", "glutton", "gnarl", "gossip", "grovel", "happy", "hinge", "humor", "impede", "inhearse", "inlay", "instate", "lapse", "muddy", "negotiate", 
            "numb", "offcap", "operate", "out-Herod", "out-talk", "out-villain", "outdare", "outfrown", "outscold", "outsell", "outweigh", "overpay", "overpower", "overrate", 
            "palate", "pander", "perplex", "petition", "rant", "reverb", "reword", "rival", "sate", "secure", "sire", "sneak", "squabble", "subcontract", "sully", "supervise", 
            "swagger", "torture", "un muzzle", "unbosom", "uncurl", "undervalue", "undress", "unfool", "unhappy", "unsex", "widen", "tortive", "traditional", "tranquil", 
            "transcendence", "trippingly", "unaccommodated", "unappeased", "unchanging", "unclaimed", "unearthy", "uneducated", "unfrequented", "ungoverned", "ungrown", 
            "unhelpful", "unhidden", "unlicensed", "unmitigated", "unmusical", "unpolluted", "unpublished", "unquestionable", "unquestioned", "unreal", "unrivaled", "unscarred", 
            "unscratched", "unsolicited", "unsolicited", "unsullied", "unswayed", "untutored", "unvarnished", "unvarnished", "unwillingness", "upstairs", "useful", "useless", 
            "valueless", "varied", "varletry", "vasty", "vulnerable", "watchdog", "water drop", "water fly", "well-behaved", "well-bred", "well-educated", "well-read", 
            "wittolly", "worn out", "wry-necked", "yelping", "zany"]
### make the coinages easier to search for
import re ### we're importing a package here that we'll learn more about, when we get into the more magical ways to explore text
for i, coinage in enumerate(coinages) :
  coinages[i] = re.sub(r' |-|', "", coinage.lower() ) ### removes all dashes, hyphens and spaces for better searching later
len( coinages )

# The titles within the Complete Works of William Shakespeare. We'll look for these in the text to know how to slice it up.
#   the plain text link at https://www.gutenberg.org/ebooks/100
# reordered chronologically
#   chronology from https://web.cn.edu/kwheeler/documents/Chronological_Shake_Canon.pdf
works_titles = [
    "THE FIRST PART OF HENRY THE SIXTH", 
    "THE SECOND PART OF KING HENRY THE SIXTH", 
    "THE THIRD PART OF KING HENRY THE SIXTH", 
    "THE COMEDY OF ERRORS", 
    "VENUS AND ADONIS", 
    "KING RICHARD THE THIRD", 
    "THE RAPE OF LUCRECE", 
    "THE TRAGEDY OF TITUS ANDRONICUS", 
    "THE TAMING OF THE SHREW", 
    "THE TWO GENTLEMEN OF VERONA", 
    "THE SONNETS", 
    "LOVE’S LABOUR’S LOST", 
    "KING JOHN", 
    "KING RICHARD THE SECOND", 
    "THE TRAGEDY OF ROMEO AND JULIET", 
    "A MIDSUMMER NIGHT’S DREAM", 
    "THE MERCHANT OF VENICE", 
    "THE MERRY WIVES OF WINDSOR", 
    "THE FIRST PART OF KING HENRY THE FOURTH", 
    "THE SECOND PART OF KING HENRY THE FOURTH", 
    "MUCH ADO ABOUT NOTHING", 
    "THE PASSIONATE PILGRIM", 
    "THE LIFE OF KING HENRY THE FIFTH", 
    "THE TRAGEDY OF JULIUS CAESAR", 
    "AS YOU LIKE IT", 
    "THE TRAGEDY OF HAMLET, PRINCE OF DENMARK", 
    "THE PHOENIX AND THE TURTLE", 
    "TWELFTH NIGHT: OR, WHAT YOU WILL", # not "TWELFTH NIGHT; OR, WHAT YOU WILL"
    "THE HISTORY OF TROILUS AND CRESSIDA", 
    "ALL’S WELL THAT ENDS WELL", 
    "THE TRAGEDY OF OTHELLO, MOOR OF VENICE", 
    "MEASURE FOR MEASURE", 
    "THE TRAGEDY OF KING LEAR", 
    "MACBETH", # not "THE TRAGEDY OF MACBETH" 
    "THE TRAGEDY OF ANTONY AND CLEOPATRA", 
    "THE LIFE OF TIMON OF ATHENS", 
    "THE TRAGEDY OF CORIOLANUS", 
    "PERICLES, PRINCE OF TYRE", 
    "A LOVER’S COMPLAINT", 
    "CYMBELINE", 
    "THE WINTER’S TALE", 
    "THE TEMPEST", 
    "KING HENRY THE EIGHTH", 
    "THE TWO NOBLE KINSMEN",
    "FRONTMATTER",  ### Beginning text of The Works
    "FINIS"         ### Concluding text of The Works
]

import pprint
import urllib.request   # another import that you've seen. This lets us search the internet.  
                        #You plug in a url and you'll get any page back.
# Pull text from project gutenberg
url = "https://www.gutenberg.org/files/100/100-0.txt"
response = urllib.request.urlopen(url)
works_raw = response.read().decode('utf-8') # this gets the raw text of the book back in a way that it's easy to work with.
#print( works_raw ) = single raw string of all the works of shapespeare

### Divide the Works by work.  

# First, we'll make a dictionary, so that we can put in the name of a work and get its text back.  
#    Eventually each value will be the list of coinages found in that work.  
#    To build that, we'll start by making each value an empty list
works_texts = {}
for title in works_titles:
  works_texts[ title ] = []

### we'll assume that everything before the first work is frontmatter
current_title = "FRONTMATTER" ### frontmatter as everything before the first text

for line in works_raw.split("\r\n"): # This \r\n business is a code for what the Enter key creates to make new lines.  
                                     # What we're doing is reading the text one line at time
  line = line.strip(" :")   # helps catching of titles in text, which use space inconsistently
  if line in works_titles:  # is the current line the title of a work?
      current_title = line  # now lets start putting text we find into the next dictionary entry
  # Break text into a list. From each word remove internal and outside punctuation
  line = [ re.sub(r' |-|', "", word.strip(",’:;.'()?!")) for word in line.split() ]
  # We've turned each work into a list of words. Then we can easily see which words are in the list.
  works_texts[ current_title ].extend( line ) # this adds the words in a line to the growing work.
                                              # it keeps going until we reach the beginning of the next work, or the end of the book.

# Show a text
text = (works_texts['THE TRAGEDY OF ROMEO AND JULIET'])

def yourStateAgent(text, name):
  capsCount = allCapsCount(text)
  for character_name in capsCount:
    if name == character_name:
      character_count = capsCount[name]
      #for key,value in capsCount.items(): 
      #get the value from that character name, assign it to a variable character_count
      if character_count >= 5:
        print("Take the part!")
      else:
        print("You'll get more time on stage mopping it!")
  return

yourStateAgent(text, "MERCUTIO")
yourStateAgent(text, "CITIZEN")

"""### 7) CHALLENGE

Going over all works of Shakespeare, build a single dictionary that counts the palindrome words.

1.   What palindrome is the most common?
1.   What palindrome of more than three characters is the most common?
1.   What is the second?
1.   What is the longest palindrome?
1.   What is the second longest palindrome?

Now use this information to search for specific plays:
6.   In which work of Shakespeare is the longest palindrome?
7.   In which work of Shakespeare is the second longest palindrome?

Assign each of your answers  to a different variable: `hw4q7p1` through `hw4q7p7`.
"""

import pprint
def palindrome_count(play_title):
  play = works_texts[play_title]
  pal = {}
  for word in play:
    if palindrome(word) == True:
      pal_counts = 0
      pal_counts += play.count(word)             
      pal[word] = pal_counts
  return (pal)

pal_words = {}
for pal_title in works_texts:
  pal_words[pal_title] = palindrome_count(pal_title)

pprint.pprint(pal_words)

#What palindrome is most common

output = {}
for i,j in pal_words.items():
  #print(j)
  for key,value in j.items():
    #print(key,value)
    if key not in output.keys():
      output[key] = value
    else:
      output[key] += value

#What palindrome is most common
#output is the dict we are dealing with now

temp = 0
for pal_key,pal_value in output.items():
  if temp < pal_value:
    temp = pal_value
    hw4q7p1 = key
print(hw4q7p1,temp)

#What palindrome of more than three characters is the most common?
temp = 0
for pal_key,pal_value in output.items():
  if len(pal_key) > 3:
    if temp < pal_value:
      temp = pal_value
      hw4q7p2 = pal_key
print(hw4q7p2,temp)

#What is the second?
temp = 0
hw4q7p2 = "madam"
for pal_key,pal_value in output.items():
  if len(pal_key) > 3 and pal_key != hw4q7p2:
    if temp < pal_value:
      temp = pal_value
      hw4q7p3 = pal_key
print(hw4q7p3,temp)

#What is the longest palindrome?
def long_palindrome(output):
  temp_key_length = 0
  for pal_key,pal_value in output.items():
    if len(pal_key) > temp_key_length:
      temp_key_length = len(pal_key)
      hw4q7p4 = pal_key
  return(hw4q7p4)
long_palindrome(output)

#What is the second longest palindrome?
def second_longest_pal(output):
  temp_key_length = 0
  hw4q7p4 = '_______________________________________________________________'
  for pal_key,pal_value in output.items():
    if len(pal_key) > temp_key_length and pal_key != hw4q7p4:
      temp_key_length = len(pal_key)
      hw4q7p5 = pal_key
  return(hw4q7p5)

second_longest_pal(output)

#In which work of Shakespeare is the longest palindrome?
for hw4q7p6, shakespeare_dict in pal_words.items():
  if long_palindrome(output) in shakespeare_dict:
    print(hw4q7p6)

#In which work of Shakespeare is the second longest palindrome?
for hw4q7p7, shakespeare_dict in pal_words.items():
  if second_longest_pal(output) in shakespeare_dict:
    print(hw4q7p7)

#What palindrome is most common TEST
test_dictionary = {
'A LOVER’S COMPLAINT': {'A': 38,
                         'I': 20,
                         'a': 31,
                         'deed': 1,
                         'eye': 4,
                         'level': 1,
                         'nun': 2,
                         'sexes': 1},
 'A MIDSUMMER NIGHT’S DREAM': {'': 2,
                               'A': 6,
                               'I': 446,
                               'O': 59,
                               'V': 2,
                               'ere': 10,
                               'eye': 20,}
}



test_output = {}
for i,j in test_dictionary.items():
  #print(j)
  for key,value in j.items():
    #print(key,value)
    if key not in test_output.keys():
      test_output[key] = value
    else:
      test_output[key] += value
print(test_output)

pprint.pprint(pal_words)