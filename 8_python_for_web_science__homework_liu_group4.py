# -*- coding: utf-8 -*-
"""8_Python_for_Web_Science__Homework_LIU_Group4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TboUD3a2_gnvZg-MKXamskbpeQvgdtS-

# Homework

**Prep**
"""

import datetime

from pprint import pprint as pp

import json
import pprint
from google.colab import files

uploaded = files.upload()
auth_pers = json.loads( list( uploaded.values() ).pop().decode('utf-8') )

gmail_email = auth_pers['gmail']['email']
gmail_apppass = auth_pers['gmail']['appPassword']

#from  https://www.interviewqs.com/blog/py_email
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# Create message container - the correct MIME type is multipart/alternative.
msg = MIMEMultipart('alternative')
msg['Subject'] = "James Bond Test email ETAOIN"
msg['From'] = gmail_email
msg['To'] = gmail_email
# Create the message (HTML).
msgtext = """\
SHRDLU We are sending an email using Python and Gmail, how fun! We can fill this with html, and gmail supports a decent range of css style attributes too - https://developers.google.com/gmail/design/css#example.
"""
msg.attach(MIMEText(msgtext))

"""Retrieving Email Set Up"""

!pip install imapclient

# from https://stackoverflow.com/questions/6618091/download-a-specific-email-from-gmail-using-python
# docs https://imapclient.readthedocs.io/en/2.1.0/api.html
import email
from email.message import EmailMessage
from imapclient import IMAPClient

## Connect, login and select the INBOX
server = IMAPClient('imap.gmail.com', use_uid=True, ssl=True)
server.login(gmail_email, gmail_apppass)
select_info = server.select_folder('INBOX')

## Search for recent relevant messages
search_term = "python"
today = datetime.datetime.today()
cutoff = today - datetime.timedelta(days=3)
## see http://tools.ietf.org/html/rfc3501#section-6.4.5
messages = server.search(['SINCE', cutoff.strftime('%d-%b-%Y'), u'TEXT', search_term],charset="UTF-8") #since is a special notification

response = server.fetch(messages, ['RFC822'])

for msgid, data in response.items():
  # parsing and decoding
  msg_string = data[b'RFC822'].decode('utf-8')
  msg = email.message_from_string(msg_string, policy=email.policy.default)
  # extracting the right parts.
  print( msg['Date'], msg['From'],msg['Subject'])
  print(msg.get_body().get_payload())

"""Twilio Set Up"""

!pip install twilio

# from https://www.twilio.com/docs/voice/tutorials/how-to-make-outbound-phone-calls-python
from twilio.rest import Client
from twilio.twiml.voice_response import Play, VoiceResponse

twilioAccount = auth_pers['twilio']['accountSID']
twilioToken = auth_pers['twilio']['authToken']
twilioPhoneRobo = auth_pers['twilio']['phoneNumberTwilio']
twilioPhoneReal = auth_pers['twilio']['phoneNumberPersonal']
client = Client(twilioAccount, twilioToken)

"""Spotify Set Up"""

!pip install spotipy

# imports
import json
import pprint
from google.colab import files
import urllib.request
import time
from IPython.display import clear_output, display, Audio, Image

# You don't have to understand this line.  
auth_pers = json.loads( list( uploaded.values() ).pop().decode('utf-8') )
insta_user_name = auth_pers['instagram']['username']
insta_password = auth_pers['instagram']['password'] #authentification for ig
spoti_clientID = auth_pers['spotify']['clientID'] #authentification for spotify
spoti_clientSecret = auth_pers['spotify']['clientSecret']

import spotipy
import spotipy.oauth2 as oauth2

credentials = oauth2.SpotifyClientCredentials(
        client_id=spoti_clientID,
        client_secret=spoti_clientSecret)

token = credentials.get_access_token()
# this is the api object for accessing the site
spotify = spotipy.Spotify(auth=token)

from collections import Counter
aid = 'spotify:album:5snUbps5KleLIP0cVI72lP'
results = spotify.album_tracks( aid  )

"""Regex Set Up"""

from  re import search

"""### 1)
How many days are there until this class is over?  How many seconds?
"""

a = datetime.date.today()
b = datetime.date(2019, 6, 10) #year, month, day, hour, second, milisecond ### day of the final
c = datetime.datetime(2019, 6, 10, 10, 00, 00) ### day of the final
d = datetime.datetime(2019, 5, 30, 10, 00, 00) ### 
e = c - d
print(((b - a).days), 'days')
print((e.total_seconds()), 'seconds')

pp(dir(c - d))  ### inspect object

"""### 2)
Write a function  that takes a month, day and year and returns the day of the week (you'll be happy to know that `date`  objects have a function that can extract the day of the week. You just have to find it). Your function should output the name of the day of the week: `'Sunday'` or `'Friday'` and so on.  Use this function to find out what day of the week you were born on.
"""

### function found on https://stackoverflow.com/questions/9847213/how-do-i-get-the-day-of-week-given-a-date-in-python
### My birthday is March 9th, 1999
def week(month, day, year):
  day = datetime.date(year, month, day)
  return day.strftime('%A')

week(3, 9, 1999)

"""### 3)  
You are loath to be late for lunch each day.  Write a function that checks the time and sends you a text reminder if it's ten till noon.
"""

def lunch():
  time_now = datetime.datetime.now().time()
  # time_now = datetime.time(11,50,00,00) ###test if it works
  # print(time_now)
  time_three = datetime.time(11, 50, 00)
  # print(time_three)
  
  if time_now == time_three:
    message = client.messages.create(
                              from_=twilioPhoneRobo,
                              to=twilioPhoneReal,
                              body='It is ten till noon.',
                          )
    print(message.sid)
  else:
    return False
  
lunch()

"""### 4) 
Write a function that take a message and, if the word "unsubscribe" appears in a URL, returns that URL. Then retrieve from your email all the messages from the past ten days with the word "unsubscribe" in them and use the function to print out the relevant URLs. 
  *  If you'd like, use the links in this list to unsubscribe from any email lists that you don't actually want to be on. But, just so you know, this won't retrieve all unsubscribe links because they don't all have "unsubscribe" in them.  It takes a bit more work to more thoroughly retrieve all the unsubscribe links in all the relevant emails.   
  *  You'll probably use regular expressions (regex) to solve this problem.
"""

# from https://stackoverflow.com/questions/6618091/download-a-specific-email-from-gmail-using-python
# docs https://imapclient.readthedocs.io/en/2.1.0/api.html
import email
from email.message import EmailMessage
from imapclient import IMAPClient

## Connect, login and select the INBOX
server = IMAPClient('imap.gmail.com', use_uid=True, ssl=True)
server.login(gmail_email, gmail_apppass)
select_info = server.select_folder('INBOX')

## Search for recent relevant messages
search_term = "unsubscribe"
today = datetime.datetime.today()
cutoff = today - datetime.timedelta(days=10)
## see http://tools.ietf.org/html/rfc3501#section-6.4.5
messages = server.search(['SINCE', cutoff.strftime('%d-%b-%Y'), u'TEXT', search_term],charset="UTF-8") #since is a special notification

response = server.fetch(messages, ['RFC822'])

for msgid, data in response.items():
  # parsing and decoding
  msg_string = data[b'RFC822'].decode('utf-8')
  msg = email.message_from_string(msg_string, policy=email.policy.default)
  # extracting the right parts.
  print( msg['Date'], msg['From'],msg['Subject'])
  print(msg.get_body().get_payload())

### function from https://stackoverflow.com/questions/49654499/python-extract-urls-from-email-messages

import re

def get_url(msg):
    return re.search(r'\@.+',msg).group(0)[1:]
  

get_url(str(msg))

pp(str(msg))

"""### 5)
With different people  preferring class communications over Canvas versus email, Facebook, or SMS, It can  be hard to keep up with class messages from me or your groupmates.  But it is easy to connect Canvas to your email. In fact, in Week 0 I instructed you to.
  *  Write code that checks your email and counts the number of messages that mention Canvas in the past seven days
  *  Write code that checks your email and texts you the subject lines of whatever Canvas messages appeared
  *  (For this to work as a homework question, you probably have to already have your Canvas messages routed to the email you're using in this assignment.  If you don't do that, send yourself some emails with a keyword such as "CANVASTEST" in them. )
"""

# from https://stackoverflow.com/questions/6618091/download-a-specific-email-from-gmail-using-python
# docs https://imapclient.readthedocs.io/en/2.1.0/api.html
import email
from email.message import EmailMessage
from imapclient import IMAPClient

## Connect, login and select the INBOX
server = IMAPClient('imap.gmail.com', use_uid=True, ssl=True)
server.login(gmail_email, gmail_apppass)
select_info = server.select_folder('INBOX')

## Search for recent relevant messages
search_term = "Canvas"
today = datetime.datetime.today()
cutoff = today - datetime.timedelta(days=7)
## see http://tools.ietf.org/html/rfc3501#section-6.4.5
messages = server.search(['SINCE', cutoff.strftime('%d-%b-%Y'), u'TEXT', search_term],charset="UTF-8") #since is a special notification

response = server.fetch(messages, ['RFC822'])

counter = 0
for msgid, data in response.items():
  # parsing and decoding
  msg_string = data[b'RFC822'].decode('utf-8')
  msg = email.message_from_string(msg_string, policy=email.policy.default)
  # extracting the right parts.
  counter += 1
  
  ### sending the text message
  message = client.messages.create(
                                from_=twilioPhoneRobo,
                                to=twilioPhoneReal,
                                body= msg['Subject'],
                            )
  print(message.sid)
  
  #print( msg['Date'], msg['From'],msg['Subject'])
  #print(msg.get_body().get_payload())
  
print(counter)

"""### 6)
Write code that checks  to  see if today is your birthday. If it is,  robocall yourself with a recording that plays you the birthday song in "[DTMF](https://www.youtube.com/watch?v=Ln-XrbuS4ok)" tones.
"""

def birthday():
  #bday = datetime.date(2019, 5, 29) ###test to see if it works 
  bday = datetime.date(2020, 3, 9)
  if datetime.datetime.now().date() == bday:
    scriptURL = 'http://demo.twilio.com/docs/voice.xml' #go to this link to see the message you send and the music file
    call = client.calls.create(
                            url=scriptURL,
                            to=twilioPhoneReal,
                            from_=twilioPhoneRobo,
                            send_digits='1216311219611#9632969363', # 🎵Happy Birthday🎵                                                                      # w means wait  for 0.5 seconds
                    )
    print(call.sid)
  else:
    return False
  
birthday()

"""### 7) CHALLENGE
Come up with something fun, creative, and/or personally useful and create a mockup of it. It should be about as ambitious as previous challenge questions. You might look through previous lessons and homeworks for ideas of things you can plug into your SMS, email, or phone.

Context: According to https://www.amsmeteors.org/meteor-showers/meteor-shower-calendar/:

- The Southern Delta Aquariids meteor shower will be active July 12th - August 23rd.
- I always wished there was an app that reminded me when meteor showers began so that I could make plans to go and watch them. 

This Challenge Does the Following:
1. When it is July 12th, it texts you, reminding you that it's "Time to go stargazing."
2. The text also has an 'auto-play' link to the song "Stargazing" by Kygo from spotify. If you click on the link in the text it will start playing a 30-sec clip from the song. (The auto-play clips do not work within functions.)
3. The program emails yourself a shopping list on Amazon that has stargazing supplies.
"""

def email():
  # Create message container - the correct MIME type is multipart/alternative.
  msg = MIMEMultipart('alternative')
  msg['Subject'] = "Time to Go Stargazing!"
  msg['From'] = gmail_email # self+anything@gmail.com
  msg['To'] = gmail_email
  # Create the message (HTML).
  msgtext = """\
  Do not forget to purchase your stargazing supplies! https://www.amazon.com/hz/wishlist/ls/LSGFY3XILXBR?ref_=wl_share
  """
  msg.attach(MIMEText(msgtext))
  
  # Sending the email
  server = smtplib.SMTP('smtp.gmail.com', 587) 
  server.ehlo()
  server.starttls()
  server.login(gmail_email,gmail_apppass)  
  server.sendmail(gmail_email, gmail_email, msg.as_string())  
  server.quit()

def song():
  star_gazing = spotify.track('spotify:track:0Zbbxnx4SGGHoIow4PpISP') # load media to python through api object
  url_mp3 = star_gazing['preview_url']                       # extract URL
  print(url_mp3)
  return Audio(url=url_mp3+'.mp3') #autoplay=True                 # retrieve the link to play stargazing by kygo

def stargazing():
  meteor = datetime.date(2019, 7, 12)
  today = datetime.datetime.now().date() ### actual today date
  # today = datetime.date(2019, 7, 12) ### testing to see if it works

  if today == meteor:
    message = client.messages.create(
                                from_=twilioPhoneRobo,
                                to=twilioPhoneReal,
                                body='Time to go stargazing. https://p.scdn.co/mp3-preview/1c83c44bc1fbe6bed8254c4203256778a7a8b83d?cid=a294930fb3ab44fdb2461a06d0534358',
                            )
    print(message.sid)
    ### song() ### play stargazing, auto audio play does not work within functions!
    email() ### email amazon shopping list to yourself

  else:
    #print(((meteor - today).days), 'days until stargazing!')
    days_until = (meteor - today).days
    message = client.messages.create(
                                from_=twilioPhoneRobo,
                                to=twilioPhoneReal,
                                body='%d days until stargazing!' % days_until,
                            )
    print(message.sid)

stargazing()